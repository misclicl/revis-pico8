pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- main --

-- y points down
-- x points right
gravity = -.3
max_air_vel = 2
cmr_lim = 32


block_width = 8

front = 1
inside = 2
backface = 3
front_far = 4
single = 14

-- game state --
collision_map = {}
-- slice = 0
objects = {}
lookup = {}
prev_x_button_state = false
function lookup.__index(self, i) return self.proto[i] end

function _init()
    i_lvl()
    i_plr()
    camera={x=0, 0}
end

function _update()
    u_plr()
    u_camera()
    u_slice()
end

function _draw()
    cls(1)

    d_lvl(camera.x, camera.y) -- todo: pass camera
    d_plr(camera)

    display_debug_info()
end

function display_debug_info()
    local cpu_load = stat(1) * 100
    local memory_used = stat(0) * 4

    -- Display the values
    print(
        "CPU: " .. flr(cpu_load).."% "..
        "RAM: " .. memory_used.." bytes", 0, 0, 7)
    print("SLICE: " .. plr.z + 1, 0, 7, 7)
    print("PLR: " .. tostring(plr.on_ground) .. " " .. plr.vel_y, 0, 14, 7)
end

function u_camera()
    -- if btn(➡️) then
    -- 	camera.x = min(camera.x+1, cmr_lim)
    -- end
    -- if btn(⬅️) then
    -- 	camera.x = max(camera.x-1, -cmr_lim)
    -- end
end

function u_slice()
    local current_x_button_state = btn(5)
    if current_x_button_state and not prev_x_button_state then
        plr.z = (plr.z + 1) % lr_h
    end

    prev_x_button_state = current_x_button_state


    local current_o_button_state = btn(4)
    if current_o_button_state and not prev_o_button_state then
        plr.z = (plr.z - 1) % lr_h
    end

    prev_o_button_state = current_o_button_state
end


-->8
-- player --
local frames_since_jump = 0
local IDLE = 0
local RUN = 1
local FALL = 2

local animations = {
    [IDLE] = {48, 2, 2},
    [RUN] = {53, 4, 4},
    [FALL] = {50, 2, 4}
}

function i_plr()
    plr = create_obj(48, 0, 0, 0)

    plr.coll_h = 8
    plr.sprt_idx = 48
    plr.state = IDLE
    plr.on_ground = false
end

function get_plr_state()
    if not plr.on_ground then
        return FALL
    elseif plr.vel_x ~= 0 then
        return RUN
    else
        return IDLE
    end
end

function u_plr()
    plr.on_ground = collides(plr, 0, 1)

    if not plr.on_ground then
        plr.vel_y -= gravity
        plr.vel_y = max(plr.vel_y, -max_air_vel)
    else
        -- plr.vel_y = 0
    end

    -- controls --
    if btn(➡️) then
        plr.proto.vel_x = 1
        plr.proto.f_y = false
    elseif btn(⬅️) then
        plr.proto.vel_x = -1
        plr.proto.f_y = true
    else
        plr.proto.vel_x=0
    end

    -- SECTION: jump
    local current_up_button_state = btn(2)
    if current_up_button_state then
        if frames_since_jump < 4 then
            printh("Jump")
            plr.vel_y = -3.5 -- jump velocity
        end

        if not prev_up_button_state then
            frames_since_jump = 0
        end
    end

    prev_up_button_state = current_up_button_state
    frames_since_jump += 1
    -- SECTION_END: jump

    -- plr.x += plr.proto.vel_x
    -- plr.y += plr.proto.vel_y

    move_obj_x(plr, plr.vel_x)
    move_obj_y(plr, plr.vel_y, function()
        plr.vel_y = 0
    end)

    plr.state = get_plr_state()

    local animation = animations[plr.state]
    plr.sprt = animation[1] + (time() * animation[3]) % animation[2]

end

function draw_player_collider(obj)
    rect(
        obj.x + obj.coll_x, obj.y + obj.coll_y,
        obj.x + obj.coll_x + obj.coll_w, obj.y + obj.coll_y + obj.coll_h,
        11
    )
end

function d_plr(camera)
    spr(
        plr.sprt,
        plr.x-camera.x,plr.y,
        1,1,
        plr.proto.f_y
    )
    -- draw_player_collider(plr)
end


-->8
-- collisiions --

function collides(o, dx, dy)
    dx = dx or 0
    dy = dy or 0

    local top = o.y + o.coll_y
    local btm =  top + o.coll_h - 1
    local left = o.x + o.coll_x
    local right = o.x + o.coll_x + o.coll_w - 1
    local corners = {
        -- top-left
        { left, top },
        -- top-right
        {  right, top },
        -- bottom-left
        { left, btm },
        -- bottom-right
        { right, btm },
    }

    printh(
        "l: " .. corners[1][1] .. ", " .. corners[1][2] ..
        " -- r: " .. corners[2][1] .. ", " .. corners[2][2])

    for i, corner in ipairs(corners) do
        -- these are world positions, represented in sprite positions
        -- e.g. squares of 8x8
        local target_point_x = flr((corner[1] + dx) / 8)
        local target_point_y = flr((corner[2] + dy) / 8)
        local target_point_z = plr.z

        -- CLEANUP: one of the places to improve performance if
        -- needed later
        for k, entry in pairs(collision_map) do
            if
                entry.x == target_point_x and
                entry.y == target_point_y and
                entry.z == target_point_z
            then
                return true
            end
        end
    end

    return false
end

-->8
--level--
layers = 8

lr_w = 16
lr_h = 8


lvl={
    layers = {}
}


function create_layer()
    local layer = {}

    for x = 1, lr_w do
        layer[x] = {}
        for i = 1, lr_h do
            layer[x][i] = 14
        end
    end

    return layer
end


function make_obj_key(x, y, z)
    local key = ""
    return key..""..x.."-"..y.."-"..z
end


function prc_layer(li)
    --[[
        0 1 2 3       {{0, 4, 5}
        4 x x 5  -->   {1, x, 7}
        6 7 8 9        {2, x, 8}
                       {3, 5, 9}}
    ]]
    local layer = create_layer()

    for x = 0, lr_w - 1 do
        for y = 0, lr_h - 1 do
            local pi = y * lr_w + x
            local pxl=get_layer_pxl(li, pi)

            layer[x + 1][y + 1] = pxl
        end
    end

    -- write world positions
    -- y from layer index
    local y = 15 - li -- from 0 to

    -- x from col_idx coords of the texture
    -- z from y coords of the texture
    for x = 0, lr_w - 1 do -- for each column
        for z = 0, lr_h - 1 do
            local obj_key = make_obj_key(x, y, z)

            local pixel_data = layer[x + 1][z + 1]

            -- printh(obj_key)

            if pixel_data ~= 0 then
                -- collision_map[obj_key] = pixel_data
                -- todo: proper spirte ?? sprite optional
                add(collision_map, create_obj(1, x, y, z))
            end
        end
    end

    lvl.layers[li+1] = layer
end

function i_lvl()
    -- local pxl=get_sprt_pxl(64,0)

    for li=0,layers-1 do
        prc_layer(li)
    end
end

local scr_btm=128
local colors_by_depth = {
    6,
    13
}

function d_lvl(cmr_x, cmr_y)
    -- for layer_idx = 1, 4 do
    --     d_layer(layer_idx)
    -- end

    -- colliders
    for k, entry in pairs(collision_map) do
        local pos_x = entry.x * 8
        local pos_y = entry.y * 8
        if (entry.z == plr.z) then
            spr(19, pos_x, pos_y)
        elseif(entry.z < plr.z) then
            spr(20, pos_x, pos_y)
        end
    end
end

-- TODO: handle front/back tiles at the wrapping "seam"
function d_layer(layer_idx)
    local layer = lvl.layers[layer_idx]
    local slice_idx = plr.z + 1

    for col_i = 1,lr_w do
        local col = layer[col_i]


        local sprite_back =
            col[(slice_idx - 1) % lr_h] ~= 0 and
            col[(slice_idx - 1) % lr_h] ~= nil
        local sprite_curr = col[slice_idx] ~= 0
        local sprite_front = col[(slice_idx + 1) % lr_h] ~= 0

        local sprite = 0

        if sprite_back then
            sprite = front_far
        end

        if sprite_curr then
            if (not sprite_back and not sprite_front) then sprite = single
            elseif sprite_back and sprite_front then sprite = inside
            elseif not sprite_back then sprite = backface
            else sprite = front end
        end

        local screen_x = (col_i - 1) * block_width
        local screen_y = scr_btm - layer_idx * 8

        spr(sprite, screen_x, screen_y)
    end
end


local lvl_start_x=0 --level start x on the spritesheet
local lvl_start_y=32 --level start x on the spritesheet
-- read pixel data from layer
function get_layer_pxl(li,pi)
    local sy = lvl_start_y + li * 8 --map start y

    local px = lvl_start_x + (pi%lr_w)
    local py = sy + flr(pi/lr_w);

    return sget(px, py)
end


-->8
-- object --

-- declaring object base --
object = {}
object.vel_x = 0;
object.vel_y = 0;
object.remainder_x = 0;
object.remainder_y = 0;
-- collider --
object.coll_x = 0
object.coll_y = 0
object.coll_w = 8
object.coll_h = 8
object.f_y = 1


function create_obj(sprt, x, y, z)
    local obj = {}
    obj.proto = object
    obj.sprt = sprt

    obj.x = x
    obj.y = y
    obj.z = z

    setmetatable(obj, lookup)
    add(objects, obj)

    return obj
end

function move_obj_x(o, x, collide_cb)
    print(x, 10, 10)
    o.remainder_x += x -- 1.4
    local int_mv_delta = flr(o.remainder_x + .5) -- mx == floor(1.9)
    o.remainder_x -= int_mv_delta -- remainder becomes .9

    local total = int_mv_delta -- totat distance to travel 1
    local mxs = sgn(int_mv_delta) -- movement direction
    while int_mv_delta != 0
    do
        if collides(o, mxs, 0) then
            return true
        else
            o.x += mxs -- move by 1 pixel
            int_mv_delta -= mxs
        end
    end

    return false
end

function move_obj_y(o, y, collide_cb)
    o.remainder_y += y
    local int_y_delta = flr(o.remainder_y + .5)
    o.remainder_y -= int_y_delta

    local total = int_y_delta
    local mys = sgn(int_y_delta)
    while int_y_delta != 0
    do
        if collides(o, 0, mys) then
            collide_cb()
            return true
        else
            o.y += mys -- move by 1 pixel
            int_y_delta -= mys
        end
    end

    return false
end

__gfx__
000000000666606606600660666666660dddd0dd0000000006666066060066600dddd0dd0d00ddd0011110110100111007777770000000008888111100000000
00000000666600606600660060000006dddd00d0000000006666006060066600dddd00d0d00ddd00111100101001110077777700000000008777888100000000
00000000600060606006600660000006d000d0d0000000006000606000060000d000d0d0000d0000100010100001000070000000000000008788118100000000
00000000000000000066006660000006000000000000000000000000000000000000000000000000000000000000000000000000000000008787818100000000
000000000600666006600660600000060d00ddd00000000006006660066660600d00ddd00dddd0d0010011100111101000000000000000007979191900000000
00000000000666006600660060000006000ddd00000000000006660006600066000ddd000dd000dd000111000110001100000000000000007977991900000000
00000000600600006006600660000006d00d0000000000006006000006000066d00d00000d0000dd100100000100001100000000000000007999111900000000
000000000000000b00660069666666680000000b000000000000000f000000080000000000000000000000000000000000000000000000007777999900000000
00000000ff0ff0ffee0ee0eeeeeeeeee222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f000000fe000000ee000000e200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000e00e0e0e200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f000000fe000000ee0e0e00e200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f000000fe000000ee00e0e0e200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000e0e0e00e200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f000000fe000000ee000000e200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ff0ff0ffee0ee0eeeeeeeeee222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000700000000000000077700000000000007770000000000000000000000000000000000000000000000000000000000000000000
00777000000000000077700000777000000000000077770000777000007777000077700000000000000000000000000000000000000000000000000000000000
00777700007770000077770000777700000000000771717000777700077171700077770000000000000000000000000000000000000000000000000000000000
07717170007777000771717007717170000000000771717007717170077171700771717000000000000000000000000000000000000000000000000000000000
07777770077171700771717007717170000000000077770007777770007777000777777000000000000000000000000000000000000000000000000000000000
00777700077777700077770000777700000000000077070000777700007007700077770000000000000000000000000000000000000000000000000000000000
00700700007777000077070000770700000000000000700000707700070000000770070000000000000000000000000000000000000000000000000000000000
00700700007007000000700000007000000000000000000000700000000000000000070000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666000000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0004040404040404080808080505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004040409090909040409090505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001010106090909050509090505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001010106060936050509090505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0003030303030303030303030505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
